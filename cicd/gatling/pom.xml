<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.perfana</groupId>
    <artifactId>gatling-afterburner</artifactId>
    <version>1.0-SNAPSHOT</version>

    <repositories>
        <repository>
            <id>sonatype-snapshots</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
            <releases><enabled>false</enabled></releases>
            <snapshots><enabled>true</enabled></snapshots>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>sonatype-snapshots</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
            <releases><enabled>false</enabled></releases>
            <snapshots><enabled>true</enabled></snapshots>
        </pluginRepository>
    </pluginRepositories>

    <properties>

        <encoding>UTF-8</encoding>

        <!-- dependency versioning -->
        <gatling.version>3.7.3</gatling.version>
        <events-gatling-maven-plugin.version>4.1.0-events-3</events-gatling-maven-plugin.version>
        <scala-maven-plugin.version>4.5.6</scala-maven-plugin.version>
        <perfana-java-client.version>[2.0.5,2.1.0)</perfana-java-client.version>
        <test-events-wiremock.version>[2.0.0,2.1.0)</test-events-wiremock.version>
        <test-events-springboot.version>[1.1.0,1.2.0)</test-events-springboot.version>
        <test-events-command-runner.version>1.0.2</test-events-command-runner.version>
        <test-events-test-run-config-command.version>[1.0.0,1.1.0)</test-events-test-run-config-command.version>

        <!-- Perfana url  -->
        <perfanaUrl>http://perfana:3000</perfanaUrl>

        <!-- Default Simulation class  -->
        <systemUnderTestSimulation>io.perfana.afterburner.gatling.setup.OptimusPrime</systemUnderTestSimulation>

        <!-- By default Jenkins build Url is used -->
        <CIBuildResultsUrl>${BUILD_URL}</CIBuildResultsUrl>

        <!-- By default no proxy is used -->
        <useProxy>false</useProxy>

        <!-- By default debugmode is off -->
        <debug>false</debug>

        <!-- Default graphite namespace -->
        <graphitePrefix>gatling2.debug</graphitePrefix>

        <!-- Default scenario -->
        <scenario>acceptance</scenario>

        <!-- By default assert test results -->
        <assertResultsEnabled>true</assertResultsEnabled>

        <!-- By default send data to perfana -->
        <perfanaEnabled>true</perfanaEnabled>

        <!-- By default disable wiremock -->
        <wiremockEnabled>false</wiremockEnabled>

        <!-- By default enable events -->
        <eventsEnabled>true</eventsEnabled>
        <eventScheduleScript></eventScheduleScript>

        <!-- Default load settings -->
        <initialUsersPerSecond>1</initialUsersPerSecond>
        <targetUsersPerSecond>1</targetUsersPerSecond>
        <rampupTimeInSeconds>60</rampupTimeInSeconds>
        <constantLoadTimeInSeconds>900</constantLoadTimeInSeconds>

        <!-- Settings for the Perfana Dashboard -->
        <systemUnderTest>Afterburner</systemUnderTest>
        <version>1.0</version>
        <tags></tags>
        <apiKey></apiKey>
        <wiremockUrl>http://wiremock:8080</wiremockUrl>
        <influxDbHost>influxdb</influxDbHost>
        <influxUrl>http://influxdb:8086</influxUrl>
        <influxUser></influxUser>
        <influxPassword></influxPassword>


    </properties>

    <dependencyManagement>

        <dependencies>
            <dependency>
                <groupId>io.gatling.highcharts</groupId>
                <artifactId>gatling-charts-highcharts</artifactId>
                <version>${gatling.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>io.gatling.highcharts</groupId>
            <artifactId>gatling-charts-highcharts</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mariadb.jdbc</groupId>
            <artifactId>mariadb-java-client</artifactId>
            <version>2.7.3</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.29</version>
        </dependency>
        <dependency>
            <groupId>io.perfana</groupId>
            <artifactId>gatling-elasticsearch-logs</artifactId>
            <version>0.9</version>
        </dependency>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-java-sdk-core</artifactId>
            <version>1.12.131</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>2.12.1</version>
        </dependency>
    </dependencies>

    <build>
        <testSourceDirectory>src/test/scala</testSourceDirectory>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>1.10</version>
                <executions>
                    <execution>
                        <id>timestamp-property</id>
                        <goals>
                            <goal>timestamp-property</goal>
                        </goals>
                        <configuration>
                            <name>build.time</name>
                            <pattern>yyyyMMdd-HHmmss</pattern>
                            <timeZone>CET</timeZone>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>${scala-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                        <configuration>
                            <jvmArgs>
                                <jvmArg>-Xss100M</jvmArg>
                            </jvmArgs>
                            <args>
                                <arg>-target:jvm-1.8</arg>
                                <arg>-deprecation</arg>
                                <arg>-feature</arg>
                                <arg>-unchecked</arg>
                                <arg>-language:implicitConversions</arg>
                                <arg>-language:postfixOps</arg>
                            </args>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>io.perfana</groupId>
                <artifactId>events-gatling-maven-plugin</artifactId>
                <version>${events-gatling-maven-plugin.version}</version>
                <configuration>
                    <resultsFolder>target/gatling/results</resultsFolder>
                    <simulationsFolder>src/test/scala</simulationsFolder>
                    <noReports>true</noReports>
                    <simulationClass>${systemUnderTestSimulation}</simulationClass>
                    <jvmArgs>
                        <jvmArg>-Dscenario=${scenario}</jvmArg>
                        <jvmArg>-DtestRunId=${testRunId}</jvmArg>
                        <jvmArg>-DtestEnvironment=${testEnvironment}</jvmArg>
                        <jvmArg>-DsystemUnderTest=${systemUnderTest}</jvmArg>
                        <jvmArg>-DtargetBaseUrl=${targetBaseUrl}</jvmArg>
                        <jvmArg>-DinitialUsersPerSecond=${initialUsersPerSecond}</jvmArg>
                        <jvmArg>-DtargetUsersPerSecond=${targetUsersPerSecond}</jvmArg>
                        <jvmArg>-DrampupTimeInSeconds=${rampupTimeInSeconds}</jvmArg>
                        <jvmArg>-DconstantLoadTimeInSeconds=${constantLoadTimeInSeconds}</jvmArg>
                        <jvmArg>-DelasticPassword=${elasticPassword}</jvmArg>
                        <jvmArg>-DemployeeDbPassword=${employeeDbPassword}</jvmArg>
                        <jvmArg>-Ddebug=${debug}</jvmArg>
                        <jvmArg>-DuseProxy=${useProxy}</jvmArg>
                        <jvmArg>-Dgatling.data.graphite.rootPathPrefix=gatling2.${systemUnderTest}.${testEnvironment}</jvmArg>
                        <jvmArg>-Dgatling.data.graphite.host=${influxDbHost}</jvmArg>
                        <jvmArg>-Xms1g</jvmArg>
                        <jvmArg>-Xmx4g</jvmArg>
                    </jvmArgs>
                    <propagateSystemProperties>false</propagateSystemProperties>

                    <eventSchedulerConfig>
                        <debugEnabled>true</debugEnabled>
                        <schedulerEnabled>${eventsEnabled}</schedulerEnabled>
                        <failOnError>true</failOnError>
                        <continueOnEventCheckFailure>true</continueOnEventCheckFailure>
                        <scheduleScript>
                            ${eventScheduleScript}
                        </scheduleScript>
                        <eventConfigs>
                            <eventConfig implementation="io.perfana.event.wiremock.WiremockEventConfig">
                                <name>MyWiremockEvent</name>
                                <enabled>${wiremockEnabled}</enabled>
                                <wiremockFilesDir>src/test/resources/wiremock</wiremockFilesDir>
                                <wiremockUrl>${wiremockUrl}</wiremockUrl>
                            </eventConfig>
                            <eventConfig implementation="io.perfana.event.PerfanaEventConfig">
                                <name>PerfanaEvent</name>
                                <enabled>${perfanaEnabled}</enabled>
                                <perfanaUrl>${perfanaUrl}</perfanaUrl>
                                <apiKey>${apiKey}</apiKey>
                                <assertResultsEnabled>${assertResultsEnabled}</assertResultsEnabled>
                                <variables>
                                    <perfana-containers>.*mariadb.*|.*${sut-config}-fe.*|.*${sut-config}-be.*</perfana-containers>
                                    <perfana-requests>database_call|flaky_call|remote_call_async</perfana-requests>
                                </variables>
                                <testConfig>
                                    <systemUnderTest>${systemUnderTest}</systemUnderTest>
                                    <version>${version}</version>
                                    <workload>${workload}</workload>
                                    <testEnvironment>${testEnvironment}</testEnvironment>
                                    <testRunId>${testRunId}</testRunId>
                                    <buildResultsUrl>${buildResultsUrl}</buildResultsUrl>
                                    <rampupTimeInSeconds>${rampupTimeInSeconds}</rampupTimeInSeconds>
                                    <constantLoadTimeInSeconds>${constantLoadTimeInSeconds}</constantLoadTimeInSeconds>
                                    <annotations>${annotations}</annotations>
                                    <tags>${tags}</tags>
                                </testConfig>
                            </eventConfig>
                            <eventConfig implementation="io.perfana.events.springboot.event.SpringBootEventConfig">
                                <name>ActuatorEventFrontend</name>
                                <tags>${sut-config}-fe</tags>
                                <actuatorBaseUrl>http://${sut-config}-fe-afterburner.acme:8080/actuator</actuatorBaseUrl>
                                <actuatorEnvProperties>
                                    java.runtime.version,
                                    JDK_JAVA_OPTIONS,
                                    afterburner.remote.call.httpclient.connection.request.timeout.millis,
                                    afterburner.remote.call.httpclient.connection.request.timeout.millis,
                                    afterburner.remote.call.httpclient.socket.timeout.millis,
                                    afterburner.remote.call.httpclient.connect.timeout.millis,
                                    afterburner.remote.call.base_url,
                                    server.tomcat.threads.max,
                                    afterburner.async_max_pool_size,
                                    afterburner.async_core_pool_size,
                                    afterburner.async_queue_size,
                                    featureToggleIdentityMatrix
                                </actuatorEnvProperties>
                            </eventConfig>
                            <eventConfig implementation="io.perfana.events.springboot.event.SpringBootEventConfig">
                                <name>ActuatorEventBackend</name>
                                <tags>${sut-config}-be</tags>
                                <actuatorBaseUrl>http://${sut-config}-be-afterburner.acme:8080/actuator</actuatorBaseUrl>
                                <actuatorEnvProperties>
                                    java.runtime.version,
                                    JDK_JAVA_OPTIONS,
                                    afterburner.async_core_pool_size,
                                    afterburner.datasource.employee.maximum-pool-size
                                </actuatorEnvProperties>
                            </eventConfig>
                            <eventConfig implementation="io.perfana.events.commandrunner.CommandRunnerEventConfig">
                                <name>CommandRunnerGatlingPush</name>
                                <command>sh -c "./g2i ./results -a ${influxUrl} -u ${influxUser} -p ${influxPassword} -b gatling3 -t acme -y ${systemUnderTest} -d | awk '{print $2}'"</command>
                            </eventConfig>
                            <eventConfig implementation="io.perfana.events.testrunconfigcommand.TestRunConfigCommandEventConfig">
                                <name>GitGetHash</name>
                                <command>git rev-parse --verify HEAD</command>
                                <output>key</output>
                                <key>https://github.com/perfana/afterburner</key>
                                <tags>GitHub</tags>
                            </eventConfig>
                            <eventConfig implementation="io.perfana.events.testrunconfigcommand.TestRunConfigCommandEventConfig">
                                <name>KubernetesGetDeploymentFE</name>
                                <command>kubectl get deployment ${sut-config}-fe-afterburner -n acme -ojson</command>
                                <includes>env,resources,image,replicas,strategy,kubernetes</includes>
                                <excludes>status,password,TOKEN</excludes>
                                <output>keys</output>
                                <tags>kubernetes,${sut-config}-fe</tags>
                            </eventConfig>
                            <eventConfig implementation="io.perfana.events.testrunconfigcommand.TestRunConfigCommandEventConfig">
                                <name>KubernetesGetDeploymentBE</name>
                                <command>kubectl get deployment ${sut-config}-be-afterburner -n acme -ojson</command>
                                <includes>env,resources,image,replicas,strategy,kubernetes</includes>
                                <excludes>status,password,TOKEN</excludes>
                                <output>keys</output>
                                <tags>kubernetes,${sut-config}-be</tags>
                            </eventConfig>
                            <eventConfig implementation="io.perfana.events.testrunconfigcommand.TestRunConfigCommandEventConfig">
                                <name>KubernetesGetDeploymentMySql</name>
                                <command>kubectl get statefulset afterburner-db-mysql -ojson</command>
                                <includes>env,resources,image,replicas,strategy,kubernetes</includes>
                                <excludes>status,password,secret,preferredDuringSchedulingIgnoredDuringExecution</excludes>
                                <output>keys</output>
                                <tags>kubernetes,afterburner-db-mysql</tags>
                            </eventConfig>
                        </eventConfigs>
                    </eventSchedulerConfig>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>io.perfana</groupId>
                        <artifactId>test-events-wiremock</artifactId>
                        <version>${test-events-wiremock.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>io.perfana</groupId>
                        <artifactId>perfana-java-client</artifactId>
                        <version>${perfana-java-client.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>io.perfana</groupId>
                        <artifactId>test-events-springboot</artifactId>
                        <version>${test-events-springboot.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>io.perfana</groupId>
                        <artifactId>test-events-command-runner</artifactId>
                        <version>${test-events-command-runner.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>io.perfana</groupId>
                        <artifactId>test-events-test-run-config-command</artifactId>
                        <version>${test-events-test-run-config-command.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>


    <!-- ************************************************************************ ==
    == Below we have defined three sets of profiles, which control the type of    ==
    == test that will be run and the targeted testEnvironment.                        ==
    == If you wish to run a stress test on acceptance, use:                       ==
    == mvn perfana-gatling:integration-test -Ptest-type-stress,test-env-acc       ==
    == ************************************************************************ -->

    <profiles>

        <!-- Test testEnvironment profiles -->

        <profile>
            <id>test-env-local</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <targetBaseUrl>http://localhost:8080</targetBaseUrl>
                <testEnvironment>local</testEnvironment>
            </properties>
        </profile>

        <profile>
            <id>test-env-tst</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <targetBaseUrl>https://tst.example.com</targetBaseUrl>
                <testEnvironment>tst</testEnvironment>
            </properties>
        </profile>


        <profile>
            <id>test-env-acc</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <targetBaseUrl>http://afterburner.acme:8080</targetBaseUrl>
                <testEnvironment>acc</testEnvironment>
            </properties>
        </profile>

        <profile>
            <id>test-env-demo</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <testEnvironment>acme</testEnvironment>
            </properties>
        </profile>

        <profile>
            <id>kubernetes</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <perfanaUrl>http://perfana.perfana.svc.cluster.local</perfanaUrl>
                <wiremockUrl>http://wiremock.perfana.svc.cluster.local:8080</wiremockUrl>
                <influxDbHost>influxdb.perfana.svc.cluster.local</influxDbHost>
            </properties>
        </profile>


        <!-- Test type profiles -->

        <profile>
            <id>test-type-stress</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <workload>stressTest</workload>
                <initialUsersPerSecond>1</initialUsersPerSecond>
                <targetUsersPerSecond>30</targetUsersPerSecond>
                <rampupTimeInSeconds>1800</rampupTimeInSeconds>
                <constantLoadTimeInSeconds>1</constantLoadTimeInSeconds>
                <perfanaEnabled>true</perfanaEnabled>
                <testRunId>${systemUnderTest}-${version}-${workload}-${testEnvironment}-${build.time}</testRunId>
                <tags>gatling,stress-test,springboot-monitoring</tags>
            </properties>
        </profile>

        <profile>
            <id>test-type-load</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <workload>loadTest</workload>
                <initialUsersPerSecond>1</initialUsersPerSecond>
                <targetUsersPerSecond>2</targetUsersPerSecond>
                <rampupTimeInSeconds>120</rampupTimeInSeconds>
                <constantLoadTimeInSeconds>300</constantLoadTimeInSeconds>
                <perfanaEnabled>true</perfanaEnabled>
                <testRunId>${systemUnderTest}-${version}-${workload}-${testEnvironment}-${build.timestamp}</testRunId>
                <eventsEnabled>true</eventsEnabled>
                <eventScheduleScript>
                    PT0S|wiremock-change-delay(delay=400)|delay=400
                </eventScheduleScript>
                <tags>gatling,springboot-monitoring</tags>
            </properties>
        </profile>

        <profile>
            <id>test-type-cpu</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <scenario>cpu</scenario>
                <workload>loadTestCpu</workload>
                <initialUsersPerSecond>1</initialUsersPerSecond>
                <targetUsersPerSecond>10</targetUsersPerSecond>
                <rampupTimeInSeconds>30</rampupTimeInSeconds>
                <constantLoadTimeInSeconds>240</constantLoadTimeInSeconds>
                <perfanaEnabled>true</perfanaEnabled>
                <testRunId>${systemUnderTest}-${version}-${workload}-${testEnvironment}-${build.timestamp}</testRunId>
                <eventsEnabled>true</eventsEnabled>
                <tags>load-test,micro-service</tags>
            </properties>
        </profile>

        <profile>
            <id>test-type-slow-backend</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <scenario>slowbackend</scenario>
                <workload>slowBackendTest</workload>
                <initialUsersPerSecond>1</initialUsersPerSecond>
                <targetUsersPerSecond>2</targetUsersPerSecond>
                <rampupTimeInSeconds>60</rampupTimeInSeconds>
                <constantLoadTimeInSeconds>300</constantLoadTimeInSeconds>
                <perfanaEnabled>true</perfanaEnabled>
                <wiremockEnabled>true</wiremockEnabled>
                <testRunId>${systemUnderTest}-${version}-${workload}-${testEnvironment}-${build.timestamp}</testRunId>
                <graphitePrefix>gatling2</graphitePrefix>
                <eventsEnabled>true</eventsEnabled>
                <eventScheduleScript>
                    PT0S|wiremock-change-delay(delay=400)|delay=400
                    PT1M|wiremock-change-delay(delay=2000)|delay=2000
                    PT2M|wiremock-change-delay(delay=4000)|delay=4000
                    PT3M|wiremock-change-delay(delay=8000)|delay=8000
                    PT4M|wiremock-change-delay(delay=12000)|delay=12000
                    PT5M|wiremock-change-delay(delay=400)|delay=400
                </eventScheduleScript>
                <tags>load-test,micro-service</tags>
            </properties>
        </profile>

        <profile>
            <id>test-type-endurance</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <workload>enduranceTest</workload>
                <initialUsersPerSecond>1</initialUsersPerSecond>
                <targetUsersPerSecond>60</targetUsersPerSecond>
                <rampupTimeInSeconds>900</rampupTimeInSeconds>
                <constantLoadTimeInSeconds>172800</constantLoadTimeInSeconds>
                <perfanaEnabled>true</perfanaEnabled>
                <testRunId>${systemUnderTest}-${version}-${workload}-${testEnvironment}-${build.time}</testRunId>
                <graphitePrefix>gatling2</graphitePrefix>
            </properties>
        </profile>

        <profile>
            <id>test-type-nightly</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <workload>nightlyLoadTest</workload>
                <initialUsersPerSecond>1</initialUsersPerSecond>
                <targetUsersPerSecond>40</targetUsersPerSecond>
                <rampupTimeInSeconds>600</rampupTimeInSeconds>
                <constantLoadTimeInSeconds>3600</constantLoadTimeInSeconds>
                <perfanaEnabled>true</perfanaEnabled>
                <assertResultsEnabled>true</assertResultsEnabled>
                <testRunId>${systemUnderTest}-${version}-${workload}-${testEnvironment}-${build.time}</testRunId>
                <graphitePrefix>gatling2.nightly</graphitePrefix>
            </properties>
        </profile>

        <!-- Scenarios-->

        <profile>
            <id>acceptance</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <scenario>acceptance</scenario>
            </properties>
        </profile>




        <!-- This profile can be used to run the script in debug mode. This results in running the "debug" scenario and results are pushed to debug namespace in Graphite  -->
        <profile>
            <id>debug</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <debug>true</debug>
                <perfanaEnabled>false</perfanaEnabled>
                <graphitePrefix>gatling2.debug</graphitePrefix>
                <scenario>debug</scenario>
                <perfanaUrl>http://localhost:4000</perfanaUrl>
            </properties>
        </profile>


        <!-- This profile can be used to route the traffic through a proxy for debugging  -->
        <profile>
            <id>proxy</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <useProxy>true</useProxy>
            </properties>
        </profile>



        <!-- This profile can be used to trigger the assertions  to assert test run results from the pipeline   -->
        <profile>
            <id>assert-results</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <assertResultsEnabled>true</assertResultsEnabled>
            </properties>
        </profile>

        <!-- This profile can be used in a distributed test -->
        <profile>
            <id>distributed-test</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <graphitePrefix>gatling2.${hostname}</graphitePrefix>
            </properties>
        </profile>

        <!-- This profile can be used to set the script as slave script in a distributed test -->
        <profile>
            <id>is-slave-script</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <perfanaEnabled>false</perfanaEnabled>
            </properties>
        </profile>

    </profiles>
</project>
